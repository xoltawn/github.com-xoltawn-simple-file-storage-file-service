// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xoltawn/simple-file-storage-file-service/domain (interfaces: FileRepository)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/xoltawn/simple-file-storage-file-service/domain"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// FetchFiles mocks base method.
func (m *MockFileRepository) FetchFiles(arg0 context.Context, arg1, arg2 int) ([]domain.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFiles indicates an expected call of FetchFiles.
func (mr *MockFileRepositoryMockRecorder) FetchFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFiles", reflect.TypeOf((*MockFileRepository)(nil).FetchFiles), arg0, arg1, arg2)
}

// SaveFile mocks base method.
func (m *MockFileRepository) SaveFile(arg0 context.Context, arg1 *domain.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFileRepositoryMockRecorder) SaveFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileRepository)(nil).SaveFile), arg0, arg1)
}

// SaveMutltipleFiles mocks base method.
func (m *MockFileRepository) SaveMutltipleFiles(arg0 context.Context, arg1 []*domain.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMutltipleFiles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMutltipleFiles indicates an expected call of SaveMutltipleFiles.
func (mr *MockFileRepositoryMockRecorder) SaveMutltipleFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMutltipleFiles", reflect.TypeOf((*MockFileRepository)(nil).SaveMutltipleFiles), arg0, arg1)
}
