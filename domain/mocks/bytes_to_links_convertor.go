// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xoltawn/simple-file-storage-file-service/domain (interfaces: BytesToLinksConvertor)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBytesToLinksConvertor is a mock of BytesToLinksConvertor interface.
type MockBytesToLinksConvertor struct {
	ctrl     *gomock.Controller
	recorder *MockBytesToLinksConvertorMockRecorder
}

// MockBytesToLinksConvertorMockRecorder is the mock recorder for MockBytesToLinksConvertor.
type MockBytesToLinksConvertorMockRecorder struct {
	mock *MockBytesToLinksConvertor
}

// NewMockBytesToLinksConvertor creates a new mock instance.
func NewMockBytesToLinksConvertor(ctrl *gomock.Controller) *MockBytesToLinksConvertor {
	mock := &MockBytesToLinksConvertor{ctrl: ctrl}
	mock.recorder = &MockBytesToLinksConvertorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBytesToLinksConvertor) EXPECT() *MockBytesToLinksConvertorMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockBytesToLinksConvertor) Convert(arg0 []byte) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert.
func (mr *MockBytesToLinksConvertorMockRecorder) Convert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockBytesToLinksConvertor)(nil).Convert), arg0)
}
